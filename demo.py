#!/usr/bin/env python3
"""
Demo script ƒë·ªÉ showcase Fastie CLI capabilities
"""

import os
import subprocess
import time

def run_command(cmd, description):
    """Run a command and display its output"""
    print(f"\nüîÑ {description}")
    print(f"üíª Command: {cmd}")
    print("=" * 50)
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        print("=" * 50)
        time.sleep(1)  # Brief pause for readability
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def main():
    """Main demo function"""
    print("üöÄ FASTIE CLI DEMO")
    print("==================")
    print("ƒê√¢y l√† demo c√°c t√≠nh nƒÉng c·ªßa Fastie CLI - Laravel Artisan cho Python")
    
    # Show CLI help
    run_command("python fastie.py --help", "Xem danh s√°ch commands c√≥ s·∫µn")
    
    # Show make commands
    run_command("python fastie.py make --help", "Xem c√°c code generators")
    
    # Show database commands
    run_command("python fastie.py db --help", "Xem c√°c database commands")
    
    # Generate some example code
    print("\nüéØ DEMO CODE GENERATION")
    print("======================")
    
    # Create a complete Blog feature
    commands = [
        ("python fastie.py make model Blog --fields \"title:str,content:str,slug:str,is_published:bool\"", 
         "T·∫°o Blog model v·ªõi fields"),
        ("python fastie.py make schema Blog --type request", 
         "T·∫°o Blog request schema"),
        ("python fastie.py make schema Blog --type response", 
         "T·∫°o Blog response schema"),
        ("python fastie.py make repository Blog", 
         "T·∫°o Blog repository interface v√† implementation"),
        ("python fastie.py make service Blog", 
         "T·∫°o Blog service interface v√† implementation"),
        ("python fastie.py make controller Blog --resource", 
         "T·∫°o Blog controller v·ªõi CRUD methods"),
    ]
    
    print("\nüìù T·∫°o ho√†n ch·ªânh Blog feature:")
    for cmd, desc in commands:
        success = run_command(cmd, desc)
        if not success:
            print(f"‚ùå Failed to execute: {cmd}")
            break
    
    # Show routes
    run_command("python fastie.py routes", "Xem t·∫•t c·∫£ routes trong application")
    
    print("\n‚úÖ DEMO COMPLETED!")
    print("==================")
    print("Files ƒë∆∞·ª£c t·∫°o:")
    print("- app/models/blog.py")
    print("- app/schemas/requests/blog/blog_request_schema.py")
    print("- app/schemas/responses/blog/blog_response_schema.py")
    print("- app/repositories/interfaces/blog/i_blog_repository.py")
    print("- app/repositories/implements/blog/blog_repository.py")
    print("- app/services/interfaces/blog/i_blog_service.py")
    print("- app/services/implements/blog/blog_service.py")
    print("- app/api/v1/controllers/blog/blog_controller.py")
    print("\nüí° ƒê·ªÉ cleanup demo files, ch·∫°y: python cleanup_demo.py")

if __name__ == "__main__":
    main() 